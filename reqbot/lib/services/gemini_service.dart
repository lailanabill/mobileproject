// GeminiService is a wrapper class to interact with the Google Generative AI (Gemini) API.
// It facilitates sending and receiving messages in a conversational context.
import 'package:google_generative_ai/google_generative_ai.dart';

class GeminiService {
  final String apiKey; // The API key for authenticating requests to the Gemini service.
  late final GenerativeModel model; // Represents the Generative AI model (Gemini).
  late final ChatSession chat; // Manages the chat session with the model.

  // Constructor for initializing the GeminiService.
  //
  // Parameters:
  // - apiKey: The API key required for accessing the Google Generative AI services.
  //
  // Initializes the generative model and starts a new chat session.
  GeminiService({required this.apiKey}) {
    model = GenerativeModel(
      model: 'gemini-pro', // Specifies the Gemini model to use (e.g., 'gemini-pro').
      apiKey: apiKey,
    );
    chat = model.startChat(); // Starts a new chat session with the model.
  }

  // Sends a message to the Gemini model and retrieves its response.
  //
  // Parameters:
  // - message: The message to send to the model.
  //
  // Returns:
  // - The text response generated by the model. If no response is generated,
  //   a fallback message is returned.
  //
  // Throws:
  // - An exception if the message fails to send or the model encounters an error.
  Future<String> sendMessage(String message) async {
    try {
      // Sends a message to the chat session and waits for a response.
      final response = await chat.sendMessage(Content.text(message));

      // Returns the generated text if available, or a fallback message if null.
      return response.text ?? 'Sorry, I could not generate a response';
    } catch (e) {
      // Throws an exception with an error message if the operation fails.
      throw Exception('Failed to send message: $e');
    }
  }
}
